
"The coding form, though, was a list of instructions in the order in which they were stored in each DL." 

- So perhaps Triads were made in the order of the Delay Lines, and Words were just stored in the order that they were read in?
  - If they were well coded, there should be no difference in that anyway.


"transfer" instructions could NOT happen between different rows of delay lines, as they were "opened" at the same time.
 - So, "7-8" would always transfer what is in the current MC of 7 into that MC of 8;
 - To get 7(8) into 8(9) or any other number, it would need to be transferred first into a TS or something similar, and then transferred with wait and timing numbers into the respective DL and MC

Wait and Timing Numbers:
The Wait number decides when the transfer starts, and the Timing number decides when the transfer ends
If the Wait number is bigger than the Timing number, the Timing number is effectively T+32 (I suppose we'll just hardcode this)

Characteristic number:
-FINALLY understand it:
  - 00 means that a single, normal transfer takes place
  - 10(1, because backwards binary) means that the transfer will take place for all (T-W+1) microcycles
  - 01(2, becasue backwards binary) means that there will be 2 transfers, for mc (m+w+2 and m+w+3)
  - 11(3) should never be used, but were it to happen, it essentially does the same thing as 10
	If W and T differ, C = 3 has just the same effect as C = 1; that is,
	a Long Transfer for T - W + 1 minor cycles from m.c. m + W + 2 to m.c.
	m + T + 2 inclusive,taking the next Instruction from m.c. m + T + 2.
	(If W exceeds T, read m + T + 34 for m + T + 2 and T - W + 33 for
	T - W +1).

     	When W = T, C = 3 increases the effective value of T by 32. Transfer
	is for 33 minor cycles from m + W + 2 to m + W + 34 inclusive (remember
	W = T) and the next Instruction enters during m.c. m + W + 34.

Adding a number to a a store multiple times will be easier to code and faster than getting the number multiplied by other means.
- So do the add instruction "X - 25" for 5mc, by having the Wait and Time words in the appropriate amount (T-W+1)
- AND HAVE THE CHARACTERISTIC BE 1, MEANING MULTIPLE TRANSFERS!!!





Instruction Examples and Explanations:
27-13 : puts 1 into TS13
   This is because S27 contains the constant "1", so instructions with 27 as the source will transfer 1

27-25: ADDs 1 into TS13
   This is because S27 contains 1, and D25 means "add the source into TS13"

13-14: puts what is in TS13 into TS14
   Easy enough; just a simple transer as would happen when both Source and Destination are less than 22

10-24: Signals for the CardPuncher to start (not to punch anything, just to wake up, really)
    D24 has to do with I/O functions. 10 as the Source is simply how it is; what other Sources do is unclear

16-29: Signals for the CardPuncher to punch out what is in the Destination Register (not sure what's meant to happen with an illegitimate Destination)
    So the Destination is the value, and S29 just means "print the value"

15-25: ADDs the contents of TS15 into TS13
    Again, D25 means "add source to TS13"


Input/Output instructions:
"10-24" : starts the puncher
"12-24" : starts the reader
"9-24"  : stops the reader or stops the puncher (as they were never used at the same time)

	The Reader has the additional facility of being stopped by a hole
	punched in column 54 of the card being read. As such a hole passes the
	reading brushes it stops the Reader just as would the instruction "9 - 24";
	the Single-Shot occurs for that row (the one in which P34 is punched),
	but not for any subsequent ones. There is no corresponding facility for
	the Punch.

^Explains the 34th hole we saw in the CRD files



Source vs Destination:

S22: Word sent from S22 will be the contents of DS21 divided by 2 (shifted once to the left, because backwards binary, must be careful of minor cycle due to double storage shenanigans)
S23: Word sent from S23 will be the contents of TS14 divided by 2 (single word)
S24: Word sent from S24 will be the contents of TS14 multiplied by 2 (shifted up to the right)
S25: Word sent from S25 will be the word (TS14 & TS15); so there will
be a '1' in the indices where both have a 1
S26: Word sent from S25 will be the word (TS14 XOR TS15); so there will be a '1' in the indices where both have a different value
S27: Contains 1000000000000000000000000000000, or, "1"
S28: Contains smallest unit in Wait (of the currently executing word maybe? rather unclear, honestly)
S29: Contains most significant digit(32nd digit, again unclear of what...)
S30: Contains 0 at all times
S31: All 1s, representing -1 in the signed convention (decrementing is
a good use? 31-25 ought to decrement TS13)

D22: Words sent to D22 are added to DS21
D23: Words sent to D23 are subtracted from DS21
D24: Depending on source (see above), manipulates peripherals of the machine
D25: Words sent to D25 are added to the contents of TS13
D26: Words sent to D26 are subtracted from the contents of TS13
D27: Words sent to D27 are checked whether if their 32nd digit is 1. If so, add 1 to Timing
D28: Words sent to D28 are checked to be 0 or non-0, 1 is added to Timing if non-0
D29: Card Puncher should punch out work in Source
D30: Deals with reading/writing from/to Magnetic Drum (Complex, look into later perhaps)
D31: Shifts reading/writing heads for the Magnetic Drum (Look into with D30)



INITIALISATION:


Depression of the initial input key on the Control Panel has the
effect of clearing the whole Delay Line store, and then calling a 'Read'
just as it is called by the instruction "12 - 24". The three cards are
now run into the Hollerith Read.
	- The first card is read in because of input from the console. Easy enough.


- The first four rows of EACH triad until the last will start with this (N is the Delay Line being filled):

0 000 00000 00000 00 00000 0000 00000 0 0   //BLANK
0 NNN 00000 NNNNN 10 10011 0000 00011 0 0   //
0 NNN 00000 NNNNN 00 01111 0000 11111 0 0   //
0 100 00000 NNNNN 00 01111 0000 11111 0 0   //I suppose this is informing the machine to go back to DL1 in the first microcycle, 						      which tells the machine to read in 3 more cards, copying their instructions

- However the triad filling the LAST delay line used by the program will have the following, where M is the DL with the first instruction to be obeyed and m is the microcycle which the machine is currently in:

0 000 00000 00000 00 00000 0000 00000 0 0   //BLANK
0 NNN 00000 NNNNN 10 10011 0000 00011 0 0   //for (26-25 + 1) microcycles, transfer blank words into the Delay line?
0 NNN 00000 NNNNN 00 01111 0000 11111 0 0   //for (30-31 + 1) microcycles, 
0 MMM 00000 NNNNN 00 01111 0000 (m-1) 0 0   //To assure the next place the program goes is the first instruction, which seems 							sensible

Really, I don't understand why the timing and wait numbers in the above are what they are... Maybe (30-31 +1) ends up in the machine somehow representing executing the instruction for an entire major cycle...?


I'm trying my best to understand the above, but it honestly is not clicking at all for me what on earth any of these instructions do... Unless I have a breakthrough or the following text is enlightening to one of you, we might just want to have the CardReader read 3 cards at a time, and write a function which is called each time a triad is read in, incrementing the clock until it is back at 0, and then start copying over words from row 5 of the inital card, and then all of the rows of the following 2 cards. "Initial cards" should also probably be skipped in favor of just some sort of initialising when the "initial input key" is pressed on the user interface, which clears all stores and sets the Counter to 0. 

I believe in the manual it said that these initial cards were available prepunched, and the first card in a triad also often had its first 4 rows prepunched, so perhaps "cheating" in this way isn't too far off from the reality of programming for the machine anyway.

Please let me know if either of you manage some sort of understanding, though!


The text explaining initial instructions is here, though due to formatting it's probably just better to read it at 

http://users.tpg.com.au/eedeuce/pm.htm#ch5

pages 57 and 58

----------------------------------------------------------------------------------------------------------------------------

8. INITIAL INSTRUCTIONS



     8.1. INITIAL INPUT.

     In reading in a programme, the words to be placed in one DL are
punched in order on three cards, leaving the first four rows of the first
card free for the special input instructions. Taking DL2 as an example,
the three cards would be as follows:-

     Row               First Card           Second Card      Third Card

      Y                  blank                  28              220

      X           2, 0 - 2, 1,26,25X            29              221

      0           2, 0 - 2,   30,31X            210             222

      1           1, 0 - 2    30,31X            211             223

      2                  20                     212             224

      3                  21                     213             225

      :                  :                      :               :

      9                  27                     219             231

     Depression of the initial input key on the Control Panel has the
effect of clearing the whole Delay Line store, and then calling a 'Read'
just as it is called by the instruction "12 - 24". The three cards are
now run into the Hollerith Read.

     TS COUNT is cleared along with the others, and therefore initially
contains the instruction "0, 0 - 0, W, T X"; the numbers W and T may have
any arbitrary values, because of the organisation of Control. The
operation of this instruction is ambiguous. It will be remembered that a
transfer to Destination 0 will generally work only if it is a long
transfer; otherwise, transfer will have ceased before the TS COUNT gate
is opened to let the next instruction in, and this next instruction will
come in the usual way from the DL named in the NIS number. However, if
T = W + 1, the transfer to D0 will work for a double transfer and (which
is the point here) if W = T it will work for a single transfer instruction
(C = 0). The instruction is in any case obeyed on the Single-Shot which
marks the first row of the first card. If, by accident, W = T after
clearing store, this row will be placed in TS COUNT; otherwise, zeros will
be placed in TS COUNT from some minor cycle of DL8 (the DL specified by
NIS0). The only way to overcome the ambiguity is to leave blank the first
row of the first card read in after clearing store. This is made a general
rule for DEUCE programmes. It is usually achieved on an Initial Card which
is also required for other purposes (see below). In the present case, the
first row is blank anyway, so no more bother is needed.


NS-y-16/5-56



Page 57



     Returning to the example, the instruction "0, 0 - 0, W, T X" is
obeyed on the first row of the first card. This has the effect of placing
"0, 0 - 0, 0, 0 X" (Zeros) in TS COUNT, either from the first row
or from some minor cycle of DL8. This is obeyed in turn at the second row,
and sends "2, 0 - 2, 1,26,25 X" to TS COUNT. At the "0" row, this fills
DL1 with 32 copies of "2, 0 - 2, 30,31 X", and takes one of these as
the next Instruction.

     The effect of "2, 0 - 2, 30, 31 X" entering TS COUNT in m.c. m is to
send the word on the next row to 2m and take the next instruction from
2m+1. In other words, each of these instructions replaces itself with a
row from the card and then proceeds to the next. The first of them is
replaced with "1, 0 - 2, 30,31 X", the second with 20, the third with 21
and so on, until the 32nd is replaced with 230 . The next instruction is
now "1, 0 - 2, 30,31 X" which replaces itself with 231 and takes the next
instruction from 10. This is still empty, and TS COUNT now contains
"0, 0 - 0, 0, 0 X", ready to start on a similar triad of cards relating
to, say, DL3.

     While the storage is empty, the minor cycles are considered anonymous
The m.c. in which the word "20" arrives in DL2 is called "m.c. 0". We will
now consider the minor cycles in which the subsequent operations take place.

     Minor Cycle.                           Operation

         0                       "20"  placed in DL2

         1                       "21"       ditto

        30                       "230"      ditto

        31                       "231"      ditto Instruction has NIS "1".

         0                       "0,0 - 0,0,0 X" enters TS COUNT from 10

         2                                  ditto                from card.

         4                       "3,0 - 3,1,26,25 X" enters TS COUNT from
                                                                    card.
      0 to 31                    32 copies of "3,0 - 3,30,31,X" enter DL3
                                                                 from card.
      also in 31                 one of these enters TS COUNT.

      in a later 31              "1,0 - 3,30,31 X" enters DL3

          0                      "30"  placed in DL3

          1                      "31"  placed in DL3

                  etc.





NS-y-16/5-56



Page 58



     It will be seen that, with the given Wait and Timing numbers, words
occupying corresponding position in the triads relating to different
Delay Lines will enter their respective DLs, in the same minor cycle.
In general, the first four rows of the triad filling DL"N" are:-

                          blank

                   "N, 0-N,  1,26,25 X"

                   "N, 0-N,    30,31 X"

                   "1, 0-N,    30,31,X"

     There are two exceptions to this. Firstly, in the triad filling the
last DL used in the programme, the fourth row is replaced with "M,0-N,
30,m-1,X" where the first instruction of the programme to be obeyed is
in DL"M", m.c. "m". Secondly, since the method uses the fact that each
DL has an NIS, a modification is needed, to fill DLs 9 to 12. In these
cases, one of the first eight DLs, not yet filled itself, is used as an
auxiliary. The first four rows of a triad which filled DL9 by using
DL7 might be:-

                   1,  0-7,  1,29,28,X

                   7,  0-9,    30,31,X

                   7,  0-7,    27,28,X

                   1,  0-9     30,31,X

     The first row fills DL7 with copies of the second row; the third row
replaces one of these with the fourth row. The other 31 are obeyed in order,
placing successive rows in DL9; the fourth row is now obeyed, completing
DL9 and returning to NIS "1" for filling the next DL, which might be DL7
itself.

     The reader is advised to work through the operation of this group of
input instructions in the same way as set out above for the filling of
DL2. He will find that DL1 is asked to supply a word of zeros on two
occasions and that the Wait and Timing numbers have been cunningly
arranged to bring both these references at minor cycle 0. A blank minor
cycle somewhere in the machine is always required for this method of filling
a DL (as well as a spare DL if DL9, 10, 11 or 12 is being filled). By
fiddling the NIS and T numbers, this blank minor cycle may be taken
anywhere in the first eight DLs; 130 is often a convenient minor
cycle,
though 10 has been used in both the examples.

---------------------------------------------------------------------------------------------------------------------------------

5.9. LONG TRANSFER.

     If C = 1, transfer is for a sequence of T - W + 1 minor cycles
from m.c. m + W + 2 to m + T + 2 inclusive. The next Instruction still
enters in m.c. m + T + 2, in the last minor cycle of transfer. If W
exceeds T, transfer is for T - W + 33 minor cycles, from m + W + 2 to
m + T + 34 and the next Instruction enters in m.c. m + T + 34.

Example.

     "7, 15 -25,1,29,1" stored in 65 adds TS15 into TS13 for five minor
     cycles from m.c. 36 to 40 inclusive i.e. from m.c.4 to 8 of the
     next Major Cycle. It takes the next Instruction from 78 at the
     second time of asking. The effect is to add five times the contents
     of TS15 into TS13; the particular minor cycles of operation
     didn't matter, and this is often true of a long Transfer.


^ Important to understand the Characteristic number, which was causing some confusion in the meeting today!

